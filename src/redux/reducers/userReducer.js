import {  createSlice } from "@reduxjs/toolkit";

const initialState={
    loading:false,
    isAuthenticated:false,
    user:null,
    message:null,
    error:null,
    title:"",
    subscriptionId:"",
    key:"",
    order_id:""
}
const userReducer=createSlice({
    name:"user",
    initialState,
    reducers:{
    loginRequest:(state)=>{
        state.loading=true
    },
    loginSuccess:(state,action)=>{
        console.log('action payload is '+JSON.stringify(action.payload))
        state.loading=false;
        state.isAuthenticated=true;
        state.user=action.payload;
        state.message="Login successfull";
    },
    loginFail:(state,action)=>{
        state.loading=false;
        state.isAuthenticated=false;
        state.user=null
        state.message=action.payload
    },
    loadUserRequest:(state)=>{
        state.loading=true
    },
    loadUserSuccess:(state,action)=>{
        state.loading=false;
        state.isAuthenticated=true;
        state.user=action.payload;
        
    },
    loadUserFail:(state,action)=>{
        state.loading=false;
        state.isAuthenticated=false;
        state.user=null
        state.message=action.payload
    },
    logoutRequest:(state)=>{
        state.loading=true
    },
    logoutSuccess:(state,action)=>{
        state.loading=false;
        state.isAuthenticated=false;
        state.user=null;
        state.message=action.payload;
        state.subscriptionId="";
        state.title="";
        state.key="";
        state.order_id="";
    },
    logoutFail:(state,action)=>{
        state.loading=false;
        state.isAuthenticated=true;
        state.error=action.payload
    },
    registerRequest:(state)=>{
        state.loading=true
    },
    registerSuccess:(state,action)=>{
        state.loading=false;
        state.isAuthenticated=true;
        state.user=action.payload.user;
        state.message=action.payload.message
    },
    registerFail:(state,action)=>{
        state.loading=false;
        state.isAuthenticated=false;
        state.user=null
        state.message=action.payload
    },
    forgetPasswordRequest:(state)=>{
        state.loading=true
    },
    forgetPasswordSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload.message;
    },
    forgetPasswordFail:(state,action)=>{
        state.loading=false;
        state.error=action.payload
    },
    resetPasswordRequest:(state)=>{
        state.loading=true
    },
    resetPasswordSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload.message;
    },
    resetPasswordFail:(state,action)=>{
        state.loading=false;
        state.error=action.payload
    },
    addToPlaylistRequest:(state)=>{
        state.loading=true
    },
    addToPlaylistSuccess:(state,action)=>{
        state.loading=false;
        state.title=action.payload.title
        state.user=action.payload.user
        state.message=action.payload.message;
    },
    addToPlaylistFail:(state,action)=>{
        state.loading=false;
        state.error=action.payload
    },
    removePlaylistRequest:(state)=>{
        state.loading=true
    },
    removePlaylistSuccess:(state,action)=>{
        state.loading=false;
        state.title=action.payload.title
        state.user=action.payload.user
        state.message=action.payload.message;
    },
    removePlaylistFail:(state,action)=>{
        state.loading=false;
        state.error=action.payload
    },
    subscribeRequest:(state)=>{
        state.loading=true;
    },
    subscribeSuccess:(state,action)=>{
        console.log("action payload is "+ JSON.stringify(action.payload))
        state.loading=false;
        state.subscriptionId=action.payload.subscriptionId
        state.order_id=action.payload.order_id
    },
    subscribeFail:(state,action)=>{
        state.loading=false;
        state.error=action.payload
    },
    canclesubscribeRequest:(state)=>{
        state.loading=true;
    },
    canclesubscribeSuccess:(state,action)=>{
        console.log("action payload is "+ JSON.stringify(action.payload))
        state.loading=false;
        state.subscriptionId="";
        state.order_id="";
        state.message=action.payload.message;
        state.error="";
    },
    canclesubscribeFail:(state,action)=>{
        state.loading=false;
        state.error=action.payload
        state.message="";
    },
    addKey:(state,action)=>{
        state.key=action.payload;
    },
    
    clearError:(state)=>{
        state.error=null
    },
    clearMessage:(state)=>{
        state.message=null
    }
}})
export const {logoutRequest,logoutSuccess,logoutFail,loginFail,loginRequest,loginSuccess
    ,clearError,clearMessage,loadUserFail,loadUserRequest,loadUserSuccess,registerRequest,
    registerSuccess,registerFail,forgetPasswordFail,forgetPasswordSuccess,forgetPasswordRequest
    ,resetPasswordFail,resetPasswordRequest,resetPasswordSuccess,addToPlaylistFail,addToPlaylistRequest,
    addToPlaylistSuccess,removePlaylistFail,removePlaylistRequest,removePlaylistSuccess,subscribeFail,
    subscribeRequest,subscribeSuccess,addKey,canclesubscribeFail,canclesubscribeRequest,canclesubscribeSuccess}=userReducer.actions;
export default userReducer.reducer;